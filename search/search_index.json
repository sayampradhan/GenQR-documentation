{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GenQR Documentation Welcome to the documentation for the GenQR project. This project includes a Streamlit app for generating colorful QR codes and a backend module for customizable QR code generation. Contents Usage : Learn how to use the GenQR application. API Reference : Detailed API documentation.","title":"Home"},{"location":"#genqr-documentation","text":"Welcome to the documentation for the GenQR project. This project includes a Streamlit app for generating colorful QR codes and a backend module for customizable QR code generation.","title":"GenQR Documentation"},{"location":"#contents","text":"Usage : Learn how to use the GenQR application. API Reference : Detailed API documentation.","title":"Contents"},{"location":"api_reference/","text":"API Reference genqr.py This module provides the genqr function for generating QR codes with customizable features. Imports qrcode (qrcode): The library used for generating QR codes. PIL.Image (PIL): The Python Imaging Library for handling images. io (io): A module used for working with streams and memory buffers. Functions genqr(data=None, color=\"black\", size=10, qr_border=5, qrversion=5) Generates a QR code with the specified parameters and returns it as a memory buffer. Parameters: data ( str , optional): The data to encode in the QR code. Default is None . Returns an error message if not provided. color ( str , optional): The color of the QR code. Default is \"black\" . size ( int , optional): The size of each box in the QR code, determining the resolution. Default is 10 . qr_border ( int , optional): The width of the border around the QR code in boxes. Default is 5 . qrversion ( int , optional): The version of the QR code, which controls the size and data capacity. Must be between 1 and 40 . Default is 5 . Returns: io.BytesIO : A memory buffer containing the QR code image if successful. str : An error message if an error occurs during the QR code generation process. genqr.py This script uses the Streamlit framework to create a web interface for generating QR codes with custom data, color, version, border, and resolution. Imports streamlit (st): The Streamlit library for creating web apps. genqr (function): A custom function from qr.py to generate QR codes. PIL.Image (PIL.Image): The Python Imaging Library for handling images. Streamlit App Components Title: st.title() : Displays the title of the web app. Content: ':violet[Gen]:rainbow[QR] \ud83c\udf1a' . Form: st.form(\"custom-qr\") : Defines a form to collect user input for generating QR codes. st.text_input() : Field for entering the data to encode in the QR code. st.color_picker() : Color picker for selecting the QR code color. st.slider() : Sliders for selecting QR version, border size, and resolution. Submission: st.form_submit_button(\"Submit\") : Button to submit the form. Conditional logic to handle empty data input and errors during QR code generation. QR Code Display: st.image() : Displays the generated QR code image. st.error() : Displays error messages if any issues occur.","title":"API Reference"},{"location":"api_reference/#api-reference","text":"","title":"API Reference"},{"location":"api_reference/#genqrpy","text":"This module provides the genqr function for generating QR codes with customizable features.","title":"genqr.py"},{"location":"api_reference/#imports","text":"qrcode (qrcode): The library used for generating QR codes. PIL.Image (PIL): The Python Imaging Library for handling images. io (io): A module used for working with streams and memory buffers.","title":"Imports"},{"location":"api_reference/#functions","text":"","title":"Functions"},{"location":"api_reference/#genqrdatanone-colorblack-size10-qr_border5-qrversion5","text":"Generates a QR code with the specified parameters and returns it as a memory buffer. Parameters: data ( str , optional): The data to encode in the QR code. Default is None . Returns an error message if not provided. color ( str , optional): The color of the QR code. Default is \"black\" . size ( int , optional): The size of each box in the QR code, determining the resolution. Default is 10 . qr_border ( int , optional): The width of the border around the QR code in boxes. Default is 5 . qrversion ( int , optional): The version of the QR code, which controls the size and data capacity. Must be between 1 and 40 . Default is 5 . Returns: io.BytesIO : A memory buffer containing the QR code image if successful. str : An error message if an error occurs during the QR code generation process.","title":"genqr(data=None, color=\"black\", size=10, qr_border=5, qrversion=5)"},{"location":"api_reference/#genqrpy_1","text":"This script uses the Streamlit framework to create a web interface for generating QR codes with custom data, color, version, border, and resolution.","title":"genqr.py"},{"location":"api_reference/#imports_1","text":"streamlit (st): The Streamlit library for creating web apps. genqr (function): A custom function from qr.py to generate QR codes. PIL.Image (PIL.Image): The Python Imaging Library for handling images.","title":"Imports"},{"location":"api_reference/#streamlit-app-components","text":"Title: st.title() : Displays the title of the web app. Content: ':violet[Gen]:rainbow[QR] \ud83c\udf1a' . Form: st.form(\"custom-qr\") : Defines a form to collect user input for generating QR codes. st.text_input() : Field for entering the data to encode in the QR code. st.color_picker() : Color picker for selecting the QR code color. st.slider() : Sliders for selecting QR version, border size, and resolution. Submission: st.form_submit_button(\"Submit\") : Button to submit the form. Conditional logic to handle empty data input and errors during QR code generation. QR Code Display: st.image() : Displays the generated QR code image. st.error() : Displays error messages if any issues occur.","title":"Streamlit App Components"},{"location":"usage/","text":"Getting Started with GenQR A Streamlit App for Generating Colorful QR Codes. This script is a Streamlit-based web application that enables users to create QR codes with customizable features such as data, color, version, border, and resolution. The generated QR code is displayed as an image on the web page. Usage To run this app, ensure you have the Streamlit framework installed along with the required libraries ( qr.py module and PIL). 1. Title The app title is displayed as GenQR \ud83c\udf1a with custom styling for an aesthetically pleasing interface. 2. Form Data : Input the data you want to encode into the QR code. Color : Choose a color for your QR code using a color picker. Version : Select the QR code version (ranges from 1 to 25). Border : Adjust the border width of the QR code. Size : Define the resolution of the QR code by selecting the size. 3. Submit After configuring the QR code settings, click the Submit button to generate the QR code. 4. Error Handling If no data is provided or an error occurs during QR code generation, an appropriate error message is displayed.","title":"Getting Started"},{"location":"usage/#getting-started-with-genqr","text":"","title":"Getting Started with GenQR"},{"location":"usage/#a-streamlit-app-for-generating-colorful-qr-codes","text":"This script is a Streamlit-based web application that enables users to create QR codes with customizable features such as data, color, version, border, and resolution. The generated QR code is displayed as an image on the web page.","title":"A Streamlit App for Generating Colorful QR Codes."},{"location":"usage/#usage","text":"To run this app, ensure you have the Streamlit framework installed along with the required libraries ( qr.py module and PIL).","title":"Usage"},{"location":"usage/#1-title","text":"The app title is displayed as GenQR \ud83c\udf1a with custom styling for an aesthetically pleasing interface.","title":"1. Title"},{"location":"usage/#2-form","text":"Data : Input the data you want to encode into the QR code. Color : Choose a color for your QR code using a color picker. Version : Select the QR code version (ranges from 1 to 25). Border : Adjust the border width of the QR code. Size : Define the resolution of the QR code by selecting the size.","title":"2. Form"},{"location":"usage/#3-submit","text":"After configuring the QR code settings, click the Submit button to generate the QR code.","title":"3. Submit"},{"location":"usage/#4-error-handling","text":"If no data is provided or an error occurs during QR code generation, an appropriate error message is displayed.","title":"4. Error Handling"}]}